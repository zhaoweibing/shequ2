{"version":3,"sources":["img/logo.png","components/Header/Header.js","components/Home/Home.js","components/Topic/Topic.js","components/User/User.js","components/Box/Box.js","components/CreateTopic/CreateTopic.js","components/Message/Message.js","components/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","state","userInfo","token","messageCount","getMessageCount","localStorage","getItem","axios","get","then","res","setState","data","login","trim","post","accesstoken","setItem","id","success","props","history","push","catch","alert","logout","clear","this","prevProps","location","pathname","className","to","src","logo","alt","avatar_url","loginname","onClick","onChange","event","target","value","type","Component","withRouter","Home","topics","currentPage","getTopics","page","limit","source","cancel","CancelToken","cancelToken","changePage","fromLocationGetType","search","includes","fromLocationGetPage","Number","match","getButtonText","topic","top","paginationTotal","tab","allNumber","find","item","indexOf","isActive","length","map","key","author","reply_count","visit_count","title","moment","last_reply_at","fromNow","current","total","defaultPageSize","Topic","comment","textareaComment","setComment","newComment","up","reply_id","author_id","currenReply","replies","action","ups","filter","message","error","handleTextarea","addComment","console","log","topic_id","content","topicid","params","myEditor","txt","html","forEach","showTextarea","info","handleReply","newTopic","ele","replyReply","E","editor","customConfig","menus","onchange","create","create_at","dangerouslySetInnerHTML","__html","style","borderBottom","padding","width","display","justifyContent","height","color","htmlFor","ref","active","User","getUserInfo","username","flexDirection","score","githubUsername","collect_topics","recent_topics","recent_replies","Box","linkText","linkAddress","title1","children","CreateTopic","handleForm","stateName","submit","placeholder","Message","messageInfo","hasnot_read_messages","has_read_messages","reply","Main","exact","path","component","locale","App","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.47c85d84.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.18e33593.png\";","import React, { Component } from \"react\";\r\nimport \"./header.css\";\r\nimport axios from \"axios\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport logo from \"../../img/logo.png\";\r\nclass Header extends Component {\r\n  state = {\r\n    userInfo: null,\r\n    token: \"c66b4eef-ac46-4770-be67-e594678af73a\",\r\n    messageCount: 0,\r\n  };\r\n  componentDidMount() {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (token) {\r\n      axios\r\n        .post(\"https://www.vue-js.com/api/v1/accesstoken\", {\r\n          accesstoken: token,\r\n        })\r\n        .then((res) => {\r\n          // console.log(res.data)\r\n          // 登陆成功之后存一个 token 到本地\r\n          localStorage.setItem(\"token\", token);\r\n          localStorage.setItem(\"author_id\", res.data.id);\r\n          delete res.data.success;\r\n          this.setState({\r\n            userInfo: res.data,\r\n          });\r\n        })\r\n        .catch(() => {\r\n          // 写成 antd 的提示\r\n          alert(\"登录失败，密码不对\");\r\n        });\r\n      // get /message/count 获取未读消息数\r\n      // 接收 get 参数\r\n      // accesstoken String\r\n      // axios.get(`https://www.vue-js.com/api/v1/message/count?accesstoken=${token}`).then(res => {\r\n      //   // console.log(res.data.data)\r\n      //   this.setState({\r\n      //     messageCount: res.data.data\r\n      //   })\r\n      // })\r\n      this.getMessageCount();\r\n    }\r\n  }\r\n  // 因为 header 组件一直会出现在页面中 所以每次切换地址栏的时候 cdu 都会执行\r\n  componentDidUpdate(prevProps) {\r\n    // 当你点击了未读消息进入到消息页面是时 默认将所有的未读消息变成了已读\r\n    // 就要更新未读消息数\r\n    // 什么时候更新\r\n    // 当页面地址改变时更新未读消息数 但是当前处于查看消息页面不更新\r\n    const token = localStorage.getItem(\"token\");\r\n    if (\r\n      this.props.location.pathname !== prevProps.location.pathname &&\r\n      this.props.location.pathname !== \"/my/messages\" &&\r\n      token\r\n    ) {\r\n      this.getMessageCount();\r\n    }\r\n  }\r\n  getMessageCount = () => {\r\n    const token = localStorage.getItem(\"token\");\r\n    axios\r\n      .get(`https://www.vue-js.com/api/v1/message/count?accesstoken=${token}`)\r\n      .then((res) => {\r\n        // console.log(res.data.data)\r\n        this.setState({\r\n          messageCount: res.data.data,\r\n        });\r\n      });\r\n  };\r\n  render() {\r\n    const { userInfo, token, messageCount } = this.state;\r\n    return (\r\n      <header>\r\n        <div className=\"header-inner\">\r\n          <Link className=\"logo\" to=\"/\">\r\n            <img src={logo} alt=\"\" />\r\n          </Link>\r\n          {/* 因为这个网站登录不需要输入用户名和密码，只需要输入一个个人的 token 码向后台发送请求即可 */}\r\n          {userInfo ? (\r\n            <div className=\"ziliao\">\r\n              <img src={userInfo.avatar_url} alt=\"\" />\r\n              <span>{userInfo.loginname}</span>\r\n\r\n              <div className=\"logout\" onClick={this.logout}>\r\n                登出\r\n              </div>\r\n              <span>\r\n                {messageCount ? (\r\n                  <span className=\"weidushu\">{messageCount}</span>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n                <Link className=\"weidu\" to=\"/my/messages\">\r\n                  未读消息\r\n                </Link>\r\n              </span>\r\n              {this.props.location.pathname === \"/topic/create\" ? (\r\n                \"\"\r\n              ) : (\r\n                <span className=\"fabu\">\r\n                  <Link to=\"/topic/create\">发布话题</Link>\r\n                </span>\r\n              )}\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              <input\r\n                className=\"zhanghao\"\r\n                onChange={(event) =>\r\n                  this.setState({ token: event.target.value })\r\n                }\r\n                value={token}\r\n                type=\"text\"\r\n              />\r\n              <div className=\"login\" onClick={this.login}>\r\n                登录\r\n              </div>\r\n            </div>\r\n          )}\r\n          <span>微信公众号</span>\r\n          <span>vue 2.0</span>\r\n          <span>参考资料</span>\r\n          <span>api</span>\r\n        </div>\r\n      </header>\r\n    );\r\n  }\r\n  login = () => {\r\n    const { token } = this.state;\r\n    if (token.trim()) {\r\n      // 发请求登录\r\n      // 地址前缀 https://www.vue-js.com/api/v1/\r\n      // 参考 api   post /accesstoken 验证 accessToken 的正确性\r\n      axios\r\n        .post(\"https://www.vue-js.com/api/v1/accesstoken\", {\r\n          accesstoken: token,\r\n        })\r\n        .then((res) => {\r\n          // 登陆成功之后存一个 token 到本地\r\n          localStorage.setItem(\"token\", token);\r\n          localStorage.setItem(\"author_id\", res.data.id);\r\n          delete res.data.success;\r\n          this.setState({\r\n            userInfo: res.data,\r\n          });\r\n          this.props.history.push(\"/\");\r\n        })\r\n        .catch(() => {\r\n          // 写成 antd 的提示\r\n          alert(\"登录失败，密码不对\");\r\n        });\r\n    }\r\n  };\r\n  logout = () => {\r\n    this.setState({\r\n      userInfo: null,\r\n    });\r\n    localStorage.clear();\r\n    this.props.history.push(\"/\");\r\n  };\r\n}\r\nexport default withRouter(Header);\r\n\r\n// 请求解释\r\n// 1. get /topics 主题首页\r\n// get   https://www.vue-js.com/api/v1/topics  获取首页的列表内容\r\n// 参数   https://www.vue-js.com/api/v1/topics?tab=all&page=1\r\n// page Number 页数\r\n// tab String 主题分类  all share wexx ask job good\r\n// limit Number 每一页的主题数量\r\n\r\n// 分页 设置的时候定义一个数组  [{tab: 'all',allNumber: 1000},{tab: 'share',allNumber: 200}] 生成对应页数的分页器\r\n// 不知道每一个类别的总数需要自己直接设置\r\n\r\n// 查看文章\r\n\r\n// 对文章发送评论\r\n// post /topic/:topic_id/replies 新建评论\r\n// 参数\r\n// accesstoken String 用户的 accessToken\r\n// content String 评论的主体\r\n// 点赞(扩展)\r\n\r\n// 点击任意头像调到个人信息页\r\n// get /user/:loginname 用户详情\r\n","import React, { Component } from \"react\";\r\nimport { NavLink, Link } from \"react-router-dom\";\r\nimport { Pagination } from \"antd\";\r\nimport \"./home.scss\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\nclass Home extends Component {\r\n  state = {\r\n    topics: [],\r\n    currentPage: 1,\r\n  };\r\n  componentDidMount() {\r\n    const type = this.fromLocationGetType();\r\n    //  ?tab=job&page=18    ===>  18\r\n    // match 方法  获取匹配到的子字符串\r\n    const currentPage = this.fromLocationGetPage();\r\n    this.setState({\r\n      currentPage,\r\n    });\r\n    this.getTopics(type, currentPage);\r\n  }\r\n  // 获取 topics 列表 发送 get 请求 https://www.vue-js.com/api/v1/topics\r\n  // 某一个类别 某一页\r\n  // 根据地址栏的信息获取到 要展示的类别 (all share job ask ...)   判断地址栏是否存在某个类别\r\n  // 还要获取对应的页 (页数已经设置成了 state )\r\n\r\n  // 什么时候需要发请求\r\n  // 刚进页面的时候   第几页需要在地址栏获取地址栏没有就默认是第一页\r\n  // 切换类别 默认第一页数据\r\n  // 分页器\r\n  // 同一时间段可以发出了多个请求\r\n  // 但是当前最新的请求可能比较快，之前的请求比较慢，会导致页面先出现最新的内容而后就会被原来的内容覆盖(显示错误)\r\n  // 取消 axios 请求\r\n  componentDidUpdate(prevProps) {\r\n    const { search } = this.props.location;\r\n    const oldsearch = prevProps.location.search;\r\n    if (search !== oldsearch) {\r\n      const type = this.fromLocationGetType();\r\n      if (!search.includes(\"page\")) {\r\n        // 点击了切换大类别并不是分页器\r\n        this.setState({\r\n          currentPage: 1,\r\n        });\r\n        this.getTopics(type, 1);\r\n      } else {\r\n        // 点击了分页器\r\n        this.getTopics(type, this.fromLocationGetPage());\r\n      }\r\n    }\r\n  }\r\n  getTopics = (type = \"all\", page = \"1\", limit = 20) => {\r\n    // 将 source 当成一个全局变量\r\n    // 上来就执行一次取消 axios 请求操作\r\n    if (this.source) {\r\n      this.source.cancel(\"Operation canceled by the user.\");\r\n    }\r\n    const CancelToken = axios.CancelToken;\r\n    this.source = CancelToken.source();\r\n    // axios.get('/user/12345', {\r\n    //   cancelToken: source.token\r\n    // }).catch(function(thrown) {\r\n    //   if (axios.isCancel(thrown)) {\r\n    //     console.log('Request canceled', thrown.message);\r\n    //   } else {\r\n    //     // 处理错误\r\n    //   }\r\n    // });\r\n    // 取消请求（message 参数是可选的）\r\n    axios\r\n      .get(\r\n        `https://www.vue-js.com/api/v1/topics?tab=${type}&limit=${limit}&page=${page}`,\r\n        {\r\n          cancelToken: this.source.token,\r\n        }\r\n      )\r\n      .then((res) => {\r\n        // console.log(res.data.data)\r\n        this.setState({\r\n          topics: res.data.data,\r\n        });\r\n      });\r\n  };\r\n  changePage = (page) => {\r\n    const type = this.fromLocationGetType();\r\n    // 更改页面地址 1. link   2. history 相关的方法\r\n    this.props.history.push(`?tab=${type}&page=${page}`);\r\n    this.setState({\r\n      currentPage: page,\r\n    });\r\n  };\r\n  fromLocationGetType = () => {\r\n    const { search } = this.props.location;\r\n    return search === \"\"\r\n      ? \"all\"\r\n      : search.includes(\"all\")\r\n      ? \"all\"\r\n      : search.includes(\"share\")\r\n      ? \"share\"\r\n      : search.includes(\"weex\")\r\n      ? \"weex\"\r\n      : search.includes(\"good\")\r\n      ? \"good\"\r\n      : search.includes(\"job\")\r\n      ? \"job\"\r\n      : \"ask\";\r\n  };\r\n  fromLocationGetPage = () => {\r\n    const { search } = this.props.location;\r\n    return search.includes(\"page\") ? Number(search.match(/[0-9]{1,2}/)[0]) : 1;\r\n  };\r\n  // 全部类别展示所有类别按钮  其他类别只展示精华或者置顶类别按钮\r\n  getButtonText = (topic) => (topic.top ? \"置顶\" : \"\");\r\n  render() {\r\n    // [{tab: 'all',allNumber: 1000},{tab: 'share',allNumber: 200}]\r\n    const { search } = this.props.location;\r\n    const { topics, currentPage } = this.state;\r\n    const paginationArr = [\r\n      { tab: \"all\", allNumber: 1015 },\r\n      { tab: \"good\", allNumber: 15 },\r\n      { tab: \"share\", allNumber: 350 },\r\n      { tab: \"weex\", allNumber: 3 },\r\n      { tab: \"job\", allNumber: 39 },\r\n      { tab: \"ask\", allNumber: 623 },\r\n    ];\r\n    const paginationTotal = paginationArr.find((item) =>\r\n      search === \"\" ? item.tab === \"all\" : search.indexOf(item.tab) > -1\r\n    ).allNumber;\r\n    return (\r\n      <div className=\"home\">\r\n        <div className=\"home-inner\">\r\n          <div className=\"nav clearfix\">\r\n            <ul>\r\n              <li>\r\n                <NavLink\r\n                  isActive={() => search.includes(\"all\") || search === \"\"}\r\n                  to=\"/?tab=all\"\r\n                >\r\n                  全部\r\n                </NavLink>\r\n              </li>\r\n              <li>\r\n                <NavLink\r\n                  isActive={() => search.includes(\"good\")}\r\n                  to=\"/?tab=good\"\r\n                >\r\n                  精华\r\n                </NavLink>\r\n              </li>\r\n              <li>\r\n                <NavLink\r\n                  isActive={() => search.includes(\"weex\")}\r\n                  to=\"/?tab=weex\"\r\n                >\r\n                  weex\r\n                </NavLink>\r\n              </li>\r\n              <li>\r\n                <NavLink\r\n                  isActive={() => search.includes(\"share\")}\r\n                  to=\"/?tab=share\"\r\n                >\r\n                  分享\r\n                </NavLink>\r\n              </li>\r\n              <li>\r\n                <NavLink isActive={() => search.includes(\"ask\")} to=\"/?tab=ask\">\r\n                  问答\r\n                </NavLink>\r\n              </li>\r\n              <li>\r\n                <NavLink isActive={() => search.includes(\"job\")} to=\"/?tab=job\">\r\n                  招聘\r\n                </NavLink>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n\r\n          <div className=\"topic-list\">\r\n            {topics.length ? (\r\n              <div>\r\n                <ul className=\"listone\">\r\n                  {topics.map((item) => (\r\n                    <li className=\"clearfix\" key={item.id}>\r\n                      <div className=\"left\">\r\n                        <Link to={`/user/${item.author.loginname}`}>\r\n                          <img src={item.author.avatar_url} alt=\"\" />\r\n                        </Link>\r\n                        <span>{this.getButtonText(item)}</span>\r\n                        <span className=\"guankan\">\r\n                          {item.reply_count}/{item.visit_count}\r\n                        </span>\r\n                        <span className=\"fenlei\">\r\n                          {item.tab === \"good\"\r\n                            ? \"精华\"\r\n                            : item.tab === \"weex\"\r\n                            ? \"weex\"\r\n                            : item.tab === \"ask\"\r\n                            ? \"问答\"\r\n                            : item.tab === \"share\"\r\n                            ? \"分享\"\r\n                            : \"招聘\"}\r\n                        </span>\r\n                        <Link className=\"tic\" to={`/topic/${item.id}`}>\r\n                          {item.title}\r\n                        </Link>\r\n                      </div>\r\n                      <div className=\"right\">\r\n                        <span className=\"time\">\r\n                          {moment(item.last_reply_at).fromNow()}\r\n                        </span>\r\n                      </div>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n                <Pagination\r\n                  onChange={this.changePage}\r\n                  current={currentPage}\r\n                  total={paginationTotal}\r\n                  defaultPageSize={20}\r\n                />\r\n              </div>\r\n            ) : (\r\n              \"请稍等\"\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Home;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Skeleton, message } from \"antd\";\r\nimport E from \"wangeditor\";\r\nimport { Link } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\nimport \"../../static/iconfont.css\";\r\nclass Topic extends Component {\r\n  state = {\r\n    topic: null,\r\n    comment: \"\",\r\n    textareaComment: \"\",\r\n  };\r\n  componentDidMount() {\r\n    // console.log(this.props)\r\n    const { topicid } = this.props.match.params;\r\n    const token = localStorage.getItem(\"token\");\r\n    axios.get(`https://www.vue-js.com/api/v1/topic/${topicid}`).then((res) => {\r\n      const topic = res.data.data;\r\n      topic.replies.forEach((item) => {\r\n        item.showTextarea = false;\r\n      });\r\n      // console.log(topic)\r\n      this.setState({\r\n        topic: topic,\r\n      });\r\n      if (token) {\r\n        // 将该编辑器定义成了组件内的全局变量\r\n        // 组件的任何地方都可以访问\r\n        this.myEditor = new E(this.editor);\r\n        this.myEditor.customConfig.menus = [\r\n          \"head\",\r\n          \"bold\",\r\n          \"italic\",\r\n          \"underline\",\r\n        ];\r\n        this.myEditor.customConfig.onchange = (html) => {\r\n          // console.log(html)\r\n          // 输入的评论内容 html 需要让点击事件获取到并且发送添加请求\r\n          // 1. 做成 state\r\n          // 2. 做成全局变量  this.xxx = html\r\n          this.setComment(html);\r\n        };\r\n        this.myEditor.create();\r\n        // new E('#editor')    #editor 是代表一个原生的dom元素\r\n      }\r\n    });\r\n  }\r\n  setComment = (newComment) => {\r\n    this.setState({\r\n      comment: newComment,\r\n    });\r\n  };\r\n  up = (reply_id) => {\r\n    // post /reply/:reply_id/ups 为评论点赞\r\n    // console.log(reply_id)\r\n    const token = localStorage.getItem(\"token\");\r\n    if (token) {\r\n      axios\r\n        .post(`https://www.vue-js.com/api/v1/reply/${reply_id}/ups`, {\r\n          accesstoken: token,\r\n        })\r\n        .then((res) => {\r\n          // console.log(res.data)\r\n          // 更新本地的数据 state\r\n          // 1. 直接操作 state\r\n          // 2. 发一个新的请求获取新的 topic\r\n          const author_id = localStorage.getItem(\"author_id\");\r\n          const topic = { ...this.state.topic };\r\n          const currenReply = topic.replies.find(\r\n            (item) => item.id === reply_id\r\n          );\r\n          if (res.data.action === \"up\") {\r\n            // 需要修改某个评论的 ups 数组\r\n            currenReply.ups.push(author_id);\r\n          } else {\r\n            currenReply.ups = currenReply.ups.filter(\r\n              (item) => item !== author_id\r\n            );\r\n          }\r\n          // console.log(topic)\r\n          this.setState({\r\n            topic: topic,\r\n          });\r\n        });\r\n    } else {\r\n      message.error(\"请先登录\");\r\n    }\r\n  };\r\n  handleTextarea = (event) => {\r\n    this.setState({\r\n      comment: event.target.value,\r\n    });\r\n  };\r\n  addComment = () => {\r\n    // post /topic/:topic_id/replies 新建评论\r\n    // 接收 post 参数\r\n    // accesstoken String 用户的 accessToken\r\n    // content String 评论的主体\r\n    const { topic, comment } = this.state;\r\n    console.log(comment);\r\n    if (comment.trim()) {\r\n      const token = localStorage.getItem(\"token\");\r\n      const topic_id = topic.id;\r\n      axios\r\n        .post(`https://www.vue-js.com/api/v1/topic/${topic_id}/replies`, {\r\n          accesstoken: token,\r\n          content: comment,\r\n        })\r\n        .then((res) => {\r\n          // 更新本地的评论\r\n          // 1. 做一个假的 reply 添加到 replies 中\r\n          // 比如原来的评论 {id:,ups:,author:,create_at,content: }       {is: ,content,ups}\r\n          // 2. 直接将新的整个文章数据请求回来\r\n          // console.log(res.data)\r\n          const { topicid } = this.props.match.params;\r\n          this.setState({\r\n            comment: \"\",\r\n          });\r\n          this.myEditor.txt.html(\"\");\r\n          // 让组件刷新一下，或者整个页面刷新一下\r\n          axios\r\n            .get(`https://www.vue-js.com/api/v1/topic/${topicid}`)\r\n            .then((res) => {\r\n              // console.log(res.data.data)\r\n              const topic = res.data.data;\r\n              topic.replies.forEach((item) => {\r\n                item.showTextarea = false;\r\n              });\r\n              this.setState({\r\n                topic: res.data.data,\r\n              });\r\n            });\r\n        });\r\n    } else {\r\n      message.info(\"请输入有效内容\");\r\n    }\r\n  };\r\n  // 点击评论的回复按钮 显示评论框和默认的评论内容\r\n  // 差个获得焦点\r\n  handleReply = ({ id, author }) => {\r\n    // 出现对应的 textArea 修改 topic\r\n    // 输如框的内容加上评论的 @作者名   修改 textareaComment\r\n\r\n    const { topic } = this.state;\r\n    const newTopic = { ...topic };\r\n    newTopic.replies.forEach((ele) => {\r\n      if (ele.id === id) {\r\n        ele.showTextarea = !ele.showTextarea;\r\n      } else {\r\n        ele.showTextarea = false;\r\n      }\r\n    });\r\n    this.setState({\r\n      topic: newTopic,\r\n      textareaComment: `@${author.loginname} `,\r\n    });\r\n  };\r\n  replyReply = (id) => {\r\n    // post /topic/:topic_id/replies 新建评论\r\n    // 接收 post 参数\r\n\r\n    // accesstoken String 用户的 accessToken\r\n    // content String 评论的主体\r\n    // reply_id String 如果这个评论是对另一个评论的回复，请务必带上此字段。这样前端就可以构建出评论线索图。\r\n    const { textareaComment, topic } = this.state;\r\n    const topic_id = topic.id;\r\n    if (textareaComment.trim()) {\r\n      const token = localStorage.getItem(\"token\");\r\n      axios\r\n        .post(`https://www.vue-js.com/api/v1/topic/${topic_id}/replies`, {\r\n          accesstoken: token,\r\n          content: textareaComment,\r\n          reply_id: id,\r\n        })\r\n        .then((res) => {\r\n          // 重新发一遍获取文章详情的请求\r\n          axios\r\n            .get(`https://www.vue-js.com/api/v1/topic/${topic_id}`)\r\n            .then((res) => {\r\n              console.log(res.data.data);\r\n              const topic = res.data.data;\r\n              topic.replies.forEach((item) => {\r\n                item.showTextarea = false;\r\n              });\r\n              this.setState({\r\n                topic: res.data.data,\r\n                textareaComment: \"\",\r\n              });\r\n            });\r\n        });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { topic, textareaComment } = this.state;\r\n    const token = localStorage.getItem(\"token\");\r\n    const author_id = localStorage.getItem(\"author_id\");\r\n    return topic ? (\r\n      <div className=\"topic\">\r\n        <div className=\"topic-inner\">\r\n          <div className=\"topic-header\">\r\n            <div className=\"header-top\">\r\n              <span>置顶</span>\r\n              <h2>{topic.title}</h2>\r\n            </div>\r\n            <div className=\"header-bottom\">\r\n              <span>发布于·{moment(topic.create_at).fromNow()}</span>\r\n              <span>\r\n                ·作者 ·{\" \"}\r\n                <Link to={`/user/${topic.author.loginname}`}>\r\n                  {topic.author.loginname}\r\n                </Link>{\" \"}\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <hr />\r\n          {/* 文章详情的样式  所有文章的内容的 class 名都是固定的，而且小标题段落图片的样式全部都是一样的 */}\r\n          <div\r\n            className=\"topic-content\"\r\n            dangerouslySetInnerHTML={{ __html: topic.content }}\r\n          ></div>\r\n          <div className=\"comment-box\">\r\n            <ul>\r\n              {topic.replies.map((item) => (\r\n                <li\r\n                  id={item.id}\r\n                  style={{\r\n                    borderBottom: \"1px solid #ccc\",\r\n                    padding: \"10px\",\r\n                    width: \"80%\",\r\n                  }}\r\n                  key={item.id}\r\n                >\r\n                  <div\r\n                    style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n                  >\r\n                    <div>\r\n                      <Link to={`/user/${item.author.loginname}`}>\r\n                        <img\r\n                          style={{ width: \"40px\", height: \"40px\" }}\r\n                          src={item.author.avatar_url}\r\n                          alt=\"\"\r\n                        />\r\n                      </Link>\r\n                      <div>\r\n                        <Link to={`/user/${item.author.loginname}`}>\r\n                          <span>{item.author.loginname}</span>\r\n                        </Link>\r\n                        <div\r\n                          dangerouslySetInnerHTML={{ __html: item.content }}\r\n                        ></div>\r\n                      </div>\r\n                    </div>\r\n                    {/* 登录和不登录*/}\r\n                    {/* 回复按钮存在或不存在  */}\r\n                    {/* 不登录点赞按钮颜色不变化 登陆之后点赞按钮颜色根据用户 id 和 item.ups 比较*/}\r\n                    <div>\r\n                      <span\r\n                        className=\"iconfont icon-zan\"\r\n                        onClick={() => this.up(item.id)}\r\n                        style={{\r\n                          color: item.ups.includes(author_id) ? \"red\" : \"#000\",\r\n                        }}\r\n                      ></span>\r\n\r\n                      <span>{item.ups.length}</span>\r\n                      {token ? (\r\n                        <span\r\n                          className=\"icon iconfont icon-huifu\"\r\n                          onClick={() => this.handleReply(item)}\r\n                        >\r\n                          <label htmlFor={item.id}></label>{\" \"}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  {item.showTextarea ? (\r\n                    <div className=\"da\">\r\n                      <textarea\r\n                        className=\"textarea\"\r\n                        id={item.id}\r\n                        onChange={(event) =>\r\n                          this.setState({\r\n                            textareaComment: event.target.value,\r\n                          })\r\n                        }\r\n                        value={textareaComment}\r\n                      ></textarea>{\" \"}\r\n                      <button\r\n                        className=\"huifuxiao\"\r\n                        onClick={() => this.replyReply(item.id)}\r\n                      >\r\n                        回复\r\n                      </button>\r\n                    </div>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n            {token ? (\r\n              <div>\r\n                <h3>添加回复</h3>\r\n                <div ref={(editor) => (this.editor = editor)} id=\"editor\"></div>\r\n                <button className=\"huifuda\" onClick={this.addComment}>\r\n                  回复\r\n                </button>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    ) : (\r\n      <Skeleton active />\r\n    );\r\n  }\r\n}\r\nexport default Topic;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\nclass User extends Component {\r\n  state = {\r\n    userInfo: null,\r\n  };\r\n  componentDidMount() {\r\n    // get /user/:loginname 用户详情\r\n    // 示例：/api/v1/user/DongHongfei\r\n    // console.log(this.props.match.params)\r\n\r\n    const username = this.props.match.params.username;\r\n    this.getUserInfo(username);\r\n  }\r\n  componentDidUpdate(prevProps) {\r\n    // 组件更新了就触发  props 或者 state 发生改变\r\n    // 因为该组件是页面(路由)组件 默认会接收路由的 props，当页面地址改变时，也就是 props 发生了改变\r\n    // 在此处想要修改 state 的话必须加判断 否则会无限循环\r\n    // console.log(this.props.location)\r\n    if (this.props.location.pathname !== prevProps.location.pathname) {\r\n      console.log(\"在用户页切换用户才会执行\");\r\n      const username = this.props.match.params.username;\r\n      this.getUserInfo(username);\r\n    }\r\n  }\r\n  getUserInfo = (username) => {\r\n    axios.get(`https://www.vue-js.com/api/v1/user/${username}`).then((res) => {\r\n      // console.log(res.data.data)\r\n      this.setState({\r\n        userInfo: res.data.data,\r\n      });\r\n    });\r\n  };\r\n  render() {\r\n    const { userInfo } = this.state;\r\n    return (\r\n      <div className=\"user-wrap\">\r\n        {userInfo ? (\r\n          <div className=\"wrap-inner\">\r\n            <div className=\"zhuye\">\r\n              <Link className=\"logo\" to=\"/\">\r\n                <div className=\"zhu\">主页</div>\r\n              </Link>\r\n              <span>/</span>\r\n            </div>\r\n            <div\r\n              className=\"gg\"\r\n              style={{ display: \"flex\", flexDirection: \"column\" }}\r\n            >\r\n              <img\r\n                className=\"tou1\"\r\n                style={{ width: \"40px\" }}\r\n                src={userInfo.avatar_url}\r\n                alt=\"\"\r\n              />\r\n              <span className=\"name\">{userInfo.loginname}</span>\r\n              <span>积分 {userInfo.score}</span>\r\n              {userInfo.githubUsername ? (\r\n                <span>@github {userInfo.githubUsername}</span>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n              {userInfo.collect_topics.length ? (\r\n                <span>{userInfo.collect_topics.length} 话题收藏</span>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n              <span className=\"zhuceshijian\">\r\n                创建时间 {moment(userInfo.last_reply_at).fromNow()}\r\n              </span>\r\n            </div>\r\n            <div className=\"kong\"></div>\r\n            <div className=\"zuijin\">\r\n              <h4>最近创建的话题</h4>\r\n              {userInfo.recent_topics.length ? (\r\n                <ul>\r\n                  {userInfo.recent_topics.map((item) => (\r\n                    <li key={item.id}>\r\n                      {\" \"}\r\n                      <Link to={`/user/${item.author.loginname}`}>\r\n                        <img src={item.author.avatar_url} alt=\"\" />\r\n                      </Link>{\" \"}\r\n                      <Link to={`/topic/${item.id}`}>{item.title}</Link>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              ) : (\r\n                <span>无话题</span>\r\n              )}\r\n            </div>\r\n            <div className=\"kong\"></div>\r\n            <div className=\"zuijincanyu\">\r\n              <h4>最近参与的话题</h4>\r\n              {userInfo.recent_replies.length ? (\r\n                <ul>\r\n                  {userInfo.recent_replies.map((item) => (\r\n                    <li key={item.id}>\r\n                      {\" \"}\r\n                      <Link to={`/user/${item.author.loginname}`}>\r\n                        <img src={item.author.avatar_url} alt=\"\" />\r\n                      </Link>{\" \"}\r\n                      <Link to={`/topic/${item.id}`}>{item.title}</Link>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              ) : (\r\n                <span>无话题</span>\r\n              )}\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div>请稍等</div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default User;\r\n","import React from 'react'\r\nimport './box.css'\r\nimport { Link } from 'react-router-dom'\r\n// 如何接收两个 children  或者 传递带名字的 children \r\nconst Box = (props) => <div className='box'>\r\n  <div className=\"box-header\">\r\n    {props.linkText ? <span> <Link to={props.linkAddress}>{props.linkText}</Link><span>/</span> {props.title1} </span> : ''}<span>{props.title}</span>\r\n  </div>\r\n  <div className=\"box-content\">\r\n    {props.children}\r\n  </div>\r\n</div>\r\nexport default Box","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport Box from \"../Box/Box\";\r\nimport E from \"wangeditor\";\r\nclass CreateTopic extends Component {\r\n  state = {\r\n    tab: \"\",\r\n    title: \"\",\r\n    content: \"\",\r\n    comment: \"\",\r\n    textareaComment: \"\",\r\n  };\r\n  componentDidMount() {\r\n    // 将该编辑器定义成了组件内的全局变量\r\n    // 组件的任何地方都可以访问\r\n    this.myEditor = new E(this.editor);\r\n    this.myEditor.customConfig.menus = [\"head\", \"bold\", \"italic\", \"underline\"];\r\n    this.myEditor.customConfig.onchange = (html) => {\r\n      // console.log(html)\r\n      // 输入的评论内容 html 需要让点击事件获取到并且发送添加请求\r\n      // 1. 做成 state\r\n      // 2. 做成全局变量  this.xxx = html\r\n      this.setState({ content: html });\r\n    };\r\n    this.myEditor.create();\r\n    // new E('#editor')    #editor 是代表一个原生的dom元素\r\n  }\r\n\r\n  render() {\r\n    const { tab, title, content } = this.state;\r\n    return (\r\n      <Box\r\n        title=\"发布话题\"\r\n        linkText=\"主页\"\r\n        linkAddress=\"/\"\r\n        title1={<span></span>}\r\n      >\r\n        <div className=\"create-topic\">\r\n          <span>选择板块:</span>\r\n          <select\r\n            value={tab}\r\n            onChange={(event) => this.handleForm(event, \"tab\")}\r\n          >\r\n            <option value=\"\">请选择</option>\r\n            <option value=\"share\">分享</option>\r\n            <option value=\"ask\">问答</option>\r\n            <option value=\"job\">招聘</option>\r\n          </select>\r\n          {/* 打开另外一个网页依然是自己的页面  */}\r\n          {tab === \"job\" ? (\r\n            <span>\r\n              为避免被管理员删帖，发帖时请好好阅读{\" \"}\r\n              <Link to=\"/topic/541ed2d05e28155f24676a12\">《招聘帖规范》</Link>\r\n            </span>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <br />\r\n          <input\r\n            className=\"sherubiao\"\r\n            onChange={(event) => this.handleForm(event, \"title\")}\r\n            value={title}\r\n            placeholder=\"标题字数 4 字以上\"\r\n          />\r\n          <br />\r\n          <div className=\"dada\">\r\n            <div ref={(editor) => (this.editor = editor)} id=\"editor\"></div>\r\n            {/* <textarea\r\n              value={content}\r\n              onChange={(event) => this.handleForm(event, \"content\")}\r\n            ></textarea> */}\r\n            <button className=\"one\" onClick={this.submit}>\r\n              提交\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </Box>\r\n    );\r\n  }\r\n  handleForm = (event, stateName) => {\r\n    this.setState({\r\n      [stateName]: event.target.value,\r\n    });\r\n  };\r\n  submit = () => {\r\n    const { tab, title, content } = this.state;\r\n    const token = localStorage.getItem(\"token\");\r\n    if (tab && title.length >= 10 && content) {\r\n      // post /topics 新建主题\r\n      // 接收 post 参数\r\n      // title String 标题\r\n      // tab String 目前有 ask share job\r\n      // content String 主体内容\r\n      axios\r\n        .post(`https://www.vue-js.com/api/v1/topics`, {\r\n          tab,\r\n          title,\r\n          content,\r\n          accesstoken: token,\r\n        })\r\n        .then((res) => {\r\n          // console.log(res.data)\r\n          this.props.history.push(`/topic/${res.data.topic_id}`);\r\n        });\r\n    }\r\n  };\r\n}\r\nexport default CreateTopic;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nclass Message extends Component {\r\n  state = {\r\n    messageInfo: null,\r\n  };\r\n  componentDidMount() {\r\n    // get /messages 获取已读和未读消息\r\n    // 接收 get 参数\r\n    // accesstoken String\r\n    const token = localStorage.getItem(\"token\");\r\n    axios\r\n      .get(`https://www.vue-js.com/api/v1/messages?accesstoken=${token}`)\r\n      .then((res) => {\r\n        this.setState({\r\n          messageInfo: res.data.data,\r\n        });\r\n        // 当进入到消息页的时候将所有的未读标记成已读\r\n        // 当有未读消息的时候才会去标记成已读\r\n        if (res.data.data.hasnot_read_messages.length > 0) {\r\n          axios\r\n            .post(`https://www.vue-js.com/api/v1/message/mark_all`, {\r\n              accesstoken: token,\r\n            })\r\n            .then((res) => {\r\n              // console.log(res)\r\n            });\r\n        }\r\n      });\r\n  }\r\n  render() {\r\n    const { messageInfo } = this.state;\r\n    return messageInfo ? (\r\n      <div className=\"message-box\">\r\n        <div className=\"box-inner \">\r\n          <h4 className=\"h4\">过往消息</h4>\r\n          {/* zhaoweibing 在话题 推荐一个优秀的语音答题社区 中@了你 */}\r\n          <ul>\r\n            {messageInfo.has_read_messages.map((item) => (\r\n              <li key={item.id}>\r\n                {\" \"}\r\n                <Link to={`/user/${item.author.loginname}`}>\r\n                  {item.author.loginname}\r\n                </Link>\r\n                在话题{\" \"}\r\n                <Link to={`/topic/${item.topic.id}#${item.reply.id}`}>\r\n                  {item.topic.title}\r\n                </Link>{\" \"}\r\n                中 {item.type === \"at\" ? \"@\" : \"回复\"}了你{\" \"}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    ) : (\r\n      <div>稍等</div>\r\n    );\r\n  }\r\n}\r\nexport default Message;\r\n","import React from 'react'\r\nimport { Route, Switch } from 'react-router-dom'\r\nimport Home from '../Home/Home'\r\nimport Topic from '../Topic/Topic'\r\nimport User from '../User/User'\r\nimport CreateTopic from '../CreateTopic/CreateTopic'\r\nimport Message from '../Message/Message'\r\nconst Main = (props) => <Switch>\r\n  <Route exact path='/' component={Home} />\r\n  <Route path='/topic/create' component={CreateTopic} />\r\n  <Route path='/topic/:topicid' component={Topic} />\r\n  <Route path='/user/:username' component={User} />\r\n  <Route path='/my/messages' component={Message} />\r\n</Switch>\r\nexport default Main","import React from \"react\";\r\nimport Header from \"./components/Header/Header\";\r\nimport Main from \"./components/Main/Main\";\r\nimport { HashRouter as Router } from \"react-router-dom\";\r\nimport \"moment/locale/zh-cn\";\r\nimport moment from \"moment\";\r\n// 全局设置  moment 的语言 设置一次就够了\r\nmoment.locale(\"zh-cn\");\r\n\r\n// HashRouter    BrowserRouter\r\n// 地址栏展示不同前者带 #\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Header />\r\n        <Main />\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}